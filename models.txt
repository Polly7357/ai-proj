# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Beverage(models.Model):
    id = models.TextField(primary_key=True, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    cde = models.FloatField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'beverage'


class C2Rates(models.Model):
    h_id = models.AutoField(primary_key=True, blank=True, null=True)
    wday_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wday_rate', blank=True, null=True)
    wend_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wend_rate', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'c2_rates'


class C3Rates(models.Model):
    h_id = models.AutoField(primary_key=True, blank=True, null=True)
    wday_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wday_rate', blank=True, null=True)
    wend_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wend_rate', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'c3_rates'


class CdeTransport(models.Model):
    id = models.TextField(primary_key=True, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    cde = models.FloatField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cde_transport'


class CfpClass(models.Model):
    class_id = models.TextField(primary_key=True, blank=True, null=True)
    class_name = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cfp_class'


class CfpSosClass(models.Model):
    cfp_sos_class_id = models.TextField(primary_key=True, blank=True, null=True)
    cfp_sos_class_name = models.TextField(blank=True, null=True)
    cfp_sub_class = models.ForeignKey('CfpSubClass', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cfp_sos_class'


class CfpSubClass(models.Model):
    sub_class_id = models.TextField(primary_key=True, blank=True, null=True)
    sub_class_name = models.TextField(blank=True, null=True)
    class_field = models.ForeignKey(CfpClass, models.DO_NOTHING, db_column='class_id', blank=True, null=True)  # Field renamed because it was a Python reserved word.

    class Meta:
        managed = False
        db_table = 'cfp_sub_class'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class EggProds(models.Model):
    id = models.TextField(primary_key=True, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    cde = models.FloatField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'egg_prods'


class ElecDeviceConsumption(models.Model):
    name = models.TextField(unique=True)
    watt = models.IntegerField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)  # This field type is a guess.

    class Meta:
        managed = False
        db_table = 'elec_device_consumption'


class Energy(models.Model):
    id = models.TextField(primary_key=True, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    cde = models.FloatField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'energy'


class LactoseProds(models.Model):
    id = models.TextField(primary_key=True, blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    cde = models.FloatField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'lactose_prods'


class MainsitePost(models.Model):
    title = models.CharField(max_length=200)
    slug = models.CharField(max_length=200)
    body = models.TextField()
    pub_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'mainsite_post'


class SummerC2Rates(models.Model):
    h_id = models.AutoField(primary_key=True, blank=True, null=True)
    wday_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wday_rate', blank=True, null=True)
    wend_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wend_rate', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'summer_c2_rates'


class SummerC3Rates(models.Model):
    h_id = models.AutoField(primary_key=True, blank=True, null=True)
    wday_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wday_rate', blank=True, null=True)
    wend_rate = models.ForeignKey('TimeElecRates', models.DO_NOTHING, db_column='wend_rate', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'summer_c3_rates'


class TimeElecRates(models.Model):
    desc = models.TextField(primary_key=True, blank=True, null=True)
    effect_date = models.IntegerField(blank=True, null=True)
    rates = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'time_elec_rates'
